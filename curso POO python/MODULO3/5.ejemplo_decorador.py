def contador_llamadas(func):
    #ğŸ”¹ *args: Recibe una lista de argumentos no nombrados (posicionales).
    #ğŸ”¹ **kwargs: Recibe un diccionario de argumentos nombrados (clave=valor).
    #ğŸ“Œ Â¿CuÃ¡ndo se usan? Cuando no sabes cuÃ¡ntos argumentos va a recibir una funciÃ³n, o quieres que sea flexible.

    def wrapper(*args, **kwargs):#ğŸ§© 1. Â¿QuÃ© es un wrapper? Un wrapper (envoltorio) es una funciÃ³n 
        #interna dentro de un decorador que envuelve la funciÃ³n original para modificar o extender 
        # su comportamiento sin modificar su cÃ³digo original.

#ğŸ“¦ Â¿CuÃ¡ndo lo usas? Cuando quieres aÃ±adir funcionalidad
# extra a una funciÃ³n (como contar llamadas, verificar permisos, medir tiempo, etc.).
        wrapper.contador += 1
        print(f"La funciÃ³n '{func.__name__}' ha sido llamada {wrapper.contador} veces.")
        return func(*args, **kwargs)
    
    wrapper.contador = 0  # Inicializamos el contador
    return wrapper

@contador_llamadas  #ğŸ§© 3. Â¿QuÃ© es @contador o @algo?
#El sÃ­mbolo @ se llama "syntactic sugar" (azÃºcar sintÃ¡ctico). Es una forma mÃ¡s limpia de escribir:
def saludar():
    print("Â¡Hola!")

@contador_llamadas
def despedirse():
    print("Â¡AdiÃ³s!")

# Pruebas
saludar()
saludar()
despedirse()
saludar()